# 📑 PROJECT SUMMARY – CECI AI BOT CHAIN

> **Purpose (EN)** – Lightweight, always‑loaded overview for Claude: explains what the project does, where the critical instructions live, and how to read them *only when needed* to save tokens.
>
> **מטרה (עברית)** – תקציר קומפקטי ש‑Claude טוען בתחילת כל שיחה, עם מפות קבצים והנחיות קריאה ממוקדת לחיסכון בטוקנים.

---

## 1 · What the System Does ⏩

*Answer complex Hebrew queries about Israeli government decisions.*

1. **Frontend** sends `POST /api/process-query` with free‑text Hebrew.
2. **Backend** proxies the payload to a single **BOT CHAIN** container (port 8002).
3. **BOT CHAIN** runs **7 GPT bots** in sequence:
   `0_REWRITE → 1_INTENT → 2X_ROUTER → 2C_CLARIFY? → 2Q_SQL → 2E_EVAL → 3Q_RANK`.
4. A **Formatter code module** (non‑GPT) formats the ranked rows into Markdown / JSON and returns the answer.
5. Data source is **Supabase PostgreSQL** (`israeli_government_decisions_*` tables).

👉 *No SQL engine any more – BOT CHAIN replaced it transparently.*

---

## 2 · Directory Landmarks 📂

| Path                                        | What lives here                                        | When to read                                                                                        |
| ------------------------------------------- | ------------------------------------------------------ | --------------------------------------------------------------------------------------------------- |
| `bot_chain/ARCHITECTURE.md`                 | Full system architecture (mermaid, ports, flows)       | **Overview only** – skim for context.                                                               |
| `bot_chain/LAYERS_SPECS/`                   | **7 individual bot specs** (prompt, examples, weights) | **Load *only* the spec of the layer in focus**.<br>e.g. handling rewrite → read `0_REWRITE_BOT.md`. |
| `bot_chain/MICRO_LEVEL_GUIDE.md`                      | Cross‑layer principles (naming, scoring, security)     | Reference for *any* layer deep dive.                                                                |
| `bot_chain/LAYERS_SPECS/SQL_DB_SPEC.md`                            | Whitelisted tables/columns & RLS notes                 | Read when crafting / debugging SQL.                                                                 |
| `bot_chain/LAYERS_SPECS/end2End_scenarios.md`                      | Sample user journeys & expected outputs                | Use for regression tests.                                                                           |
| `bot_chain/LAYERS_SPECS/israeli_government_decisions_DB_SCHEME.md` | PostgreSQL schema diagram                              | Needed only for new SQL joins.                                                                      |

> 🔖 **Rule of Thumb** – *If you are interacting with or modifying a single bot layer, read:*<br>  1. That layer’s spec (one file).<br>  2. The `MICRO_LEVEL_GUIDE` for common rules.<br>  3. Skip everything else unless explicitly required.

---

## 3 · Token‑Saving Guidelines 🪙

1. **Minimal Context Loading** – Never ingest the entire repo. Pick the smallest relevant doc(s).
2. **Layer Isolation** – Each bot spec is self‑contained; do not preload specs for other layers.
3. **Debug Info** – Use `debug_info.token_usage` returned from BOT CHAIN to monitor consumption.
4. **Formatter** uses **no GPT tokens** – keep heavy post‑processing logic in code.

---

## 4 · Quick Reference ✏️

| Need                    | Open this                                            |
| ----------------------- | ---------------------------------------------------- |
| Understand overall flow | `ARCHITECTURE_BOT_CHAIN.md` (Section 2 Runtime Flow) |
| Check REST contract     | `ARCHITECTURE_BOT_CHAIN.md` (Section 4)              |
| Tune a prompt           | `bot_chain/LAYERS_SPECS/<layer>.md`                  |
| Validate DB columns     | `SQL_DB_SPEC.md` + `*_DB_SCHEME.md`                  |
| Estimate cost           | Token budget table (Architecture §8)                 |

---

## 5 · Contact

*Maintainer*: **Tomer** – [tomer@example.com](mailto:tomer@example.com)

---

*Loaded at conversation start – keep it short & actionable.*
