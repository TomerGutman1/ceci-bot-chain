
services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "5001:5173"
    env_file:
      - .env.prod
    environment:
      - REDIS_URL=redis://redis:6379
      - SQL_ENGINE_URL=http://localhost:5000
      - SQL_ENGINE_ENABLED=true
      - SQL_ENGINE_PERCENTAGE=100
      - BOT_CHAIN_ENABLED=true
      - REWRITE_BOT_URL=http://rewrite-bot:8010
      - INTENT_BOT_URL=http://intent-bot:8011
      - SQL_GEN_BOT_URL=http://sql-gen-bot:8012
      - CONTEXT_ROUTER_BOT_URL=http://context-router-bot:8013
      - EVALUATOR_BOT_URL=http://evaluator-bot:8014
      - CLARIFY_BOT_URL=http://clarify-bot:8015
      - RANKER_BOT_URL=http://ranker-bot:8016
      - FORMATTER_BOT_URL=http://formatter-bot:8017
      - BOT_CHAIN_TIMEOUT=120000
    depends_on:
      - redis
      - rewrite-bot
      - intent-bot
      - sql-gen-bot
      - context-router-bot
      - evaluator-bot
      - clarify-bot
      - ranker-bot
      - formatter-bot
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env.prod
    depends_on:
      - backend
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    build:
      context: ./deploy/nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bot Chain Services
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ceci_bot_chain
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./bot_chain/schemas/database_schema.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rewrite-bot:
    build:
      context: ./bot_chain
      dockerfile: ./MAIN_REWRITE_BOT_0/Dockerfile
    restart: unless-stopped
    ports:
      - "8010:8010"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  intent-bot:
    build:
      context: ./bot_chain/INTENT_RCGNZR_0
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8011:8011"
    environment:
      - PORT=8011
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  sql-gen-bot:
    build:
      context: ./bot_chain
      dockerfile: ./QUERY_SQL_GEN_BOT_2Q/Dockerfile
    restart: unless-stopped
    ports:
      - "8012:8012"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  context-router-bot:
    build:
      context: ./bot_chain
      dockerfile: ./MAIN_CTX_ROUTER_BOT_2X/Dockerfile
    restart: unless-stopped
    ports:
      - "8013:8013"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  evaluator-bot:
    build:
      context: ./bot_chain
      dockerfile: ./EVAL_EVALUATOR_BOT_2E/Dockerfile
    restart: unless-stopped
    ports:
      - "8014:8014"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SQL_GEN_BOT_URL=http://sql-gen-bot:8012
      - BACKEND_URL=http://backend:5173
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  clarify-bot:
    build:
      context: ./bot_chain
      dockerfile: ./CLARIFY_CLARIFY_BOT_2C/Dockerfile
    restart: unless-stopped
    ports:
      - "8015:8015"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ranker-bot:
    build:
      context: ./bot_chain
      dockerfile: ./QUERY_RANKER_BOT_3Q/Dockerfile
    restart: unless-stopped
    ports:
      - "8016:8016"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  formatter-bot:
    build:
      context: ./bot_chain
      dockerfile: ./MAIN_FORMATTER_4/Dockerfile
    restart: unless-stopped
    ports:
      - "8017:8017"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8017/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - ceci-network

volumes:
  redis-data:
  postgres_data:

networks:
  ceci-network:
    name: ceci-ai-prod-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16
