name: E2E Quick Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'bot_chain/**'
      - '.github/workflows/e2e-quick.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'bot_chain/**'

jobs:
  e2e-quick:
    name: Bot Chain E2E Quick Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Create test environment file
        run: |
          cd bot_chain
          cat > .env << 'EOF'
          # Test environment configuration
          OPENAI_API_KEY=sk-test-key-for-ci-testing
          SUPABASE_URL=https://test.supabase.co
          SUPABASE_SERVICE_KEY=test-service-key
          SUPABASE_ANON_KEY=test-anon-key
          REDIS_URL=redis://redis:6379
          POSTGRES_PASSWORD=postgres
          LOG_LEVEL=INFO
          NODE_ENV=test
          EOF
      
      - name: Start infrastructure services
        run: |
          cd bot_chain
          # Start only Redis and Postgres first
          docker compose up -d redis postgres
          sleep 10
      
      - name: Check infrastructure health
        run: |
          cd bot_chain
          echo "=== Checking Redis ==="
          docker compose exec -T redis redis-cli ping || echo "Redis not ready"
          
          echo "=== Checking Postgres ==="
          docker compose exec -T postgres pg_isready -U postgres || echo "Postgres not ready"
          
          echo "=== Infrastructure Status ==="
          docker compose ps
      
      - name: Build bot services
        run: |
          cd bot_chain
          echo "=== Building bot services ==="
          
          # Build services that we have implemented
          if [ -d "0_MAIN_REWRITE_BOT" ]; then
            docker compose build rewrite-bot
          fi
          
          if [ -d "1_MAIN_INTENT_BOT" ]; then
            docker compose build intent-bot
          fi
          
          if [ -d "2Q_QUERY_SQL_GEN_BOT" ]; then
            docker compose build sql-gen-bot
          fi
      
      - name: Start implemented bot services
        run: |
          cd bot_chain
          echo "=== Starting implemented bot services ==="
          
          # Start only the services we have built
          services_to_start=""
          
          if docker images | grep -q "bot_chain[_-]rewrite-bot"; then
            services_to_start="$services_to_start rewrite-bot"
          fi
          
          if docker images | grep -q "bot_chain[_-]intent-bot"; then
            services_to_start="$services_to_start intent-bot"
          fi
          
          if docker images | grep -q "bot_chain[_-]sql-gen-bot"; then
            services_to_start="$services_to_start sql-gen-bot"
          fi
          
          if [ -n "$services_to_start" ]; then
            echo "Starting services: $services_to_start"
            docker compose up -d $services_to_start
            sleep 30  # Wait for services to start
          else
            echo "No bot services to start"
          fi
      
      - name: Check service health
        run: |
          cd bot_chain
          echo "=== Service Health Check ==="
          docker compose ps
          
          echo "=== Service Logs ==="
          docker compose logs --tail=20
      
      - name: Run quick tests
        run: |
          cd bot_chain
          echo "=== Running Bot Chain Quick Tests ==="
          
          # Run our custom bot chain tests
          if [ -f "tests/run_bot_chain_tests.sh" ]; then
            chmod +x tests/run_bot_chain_tests.sh
            ./tests/run_bot_chain_tests.sh -m quick -v summary || true
          else
            echo "Bot chain test script not found, creating minimal test"
            
            # Test what we can test
            echo "Testing infrastructure..."
            
            # Test Redis
            if docker compose exec -T redis redis-cli ping >/dev/null 2>&1; then
              echo "✓ Redis is healthy"
            else
              echo "✗ Redis is not responding"
            fi
            
            # Test Postgres
            if docker compose exec -T postgres pg_isready -U postgres >/dev/null 2>&1; then
              echo "✓ Postgres is healthy"
            else
              echo "✗ Postgres is not responding"
            fi
            
            # Test bot services if running
            for port in 8010 8011 8012; do
              if curl -f -s "http://localhost:$port/health" >/dev/null 2>&1; then
                echo "✓ Service on port $port is healthy"
              else
                echo "ℹ Service on port $port not available (may not be implemented yet)"
              fi
            done
          fi
      
      - name: Collect logs on failure
        if: failure()
        run: |
          cd bot_chain
          echo "=== Collecting failure logs ==="
          docker compose logs
          
          echo "=== Container status ==="
          docker compose ps -a
          
          echo "=== Test results ==="
          if [ -f "tests/bot_chain_results.ndjson" ]; then
            cat tests/bot_chain_results.ndjson
          fi
      
      - name: Cleanup
        if: always()
        run: |
          cd bot_chain
          docker compose down -v
          docker system prune -f