version: '3.8'

services:
  # Common infrastructure
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - bot_redis_data:/data
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ceci_bot_chain
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - bot_postgres_data:/var/lib/postgresql/data
      - ./schemas/database_schema.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Bot Chain Services
  
  # Note: Using unified architecture - rewrite functionality merged into unified-intent-bot

  unified-intent-bot:
    build:
      context: .
      dockerfile: ./UNIFIED_INTENT_BOT_1/Dockerfile
    restart: unless-stopped
    ports:
      - "8011:8011"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  sql-gen-bot:
    build:
      context: .
      dockerfile: ./QUERY_SQL_GEN_BOT_2Q/Dockerfile
    restart: unless-stopped
    ports:
      - "8012:8012"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Context Router Bot - Conversation context management and routing
  context-router-bot:
    build:
      context: .
      dockerfile: ./MAIN_CTX_ROUTER_BOT_2X/Dockerfile
    restart: unless-stopped
    ports:
      - "8013:8013"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Evaluator Bot - Result evaluation and quality scoring
  evaluator-bot:
    build:
      context: .
      dockerfile: ./EVAL_EVALUATOR_BOT_2E/Dockerfile
    restart: unless-stopped
    ports:
      - "8014:8014"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Clarification Bot - Generate clarification questions for ambiguous queries
  clarify-bot:
    build:
      context: .
      dockerfile: ./CLARIFY_CLARIFY_BOT_2C/Dockerfile
    restart: unless-stopped
    ports:
      - "8015:8015"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ranking Bot - Rank and prioritize search results
  ranker-bot:
    build:
      context: .
      dockerfile: ./QUERY_RANKER_BOT_3Q/Dockerfile
    restart: unless-stopped
    ports:
      - "8016:8016"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Formatter Bot - Format search results into user-friendly responses
  formatter:
    build:
      context: .
      dockerfile: ./LLM_FORMATTER_BOT_4/Dockerfile
    restart: unless-stopped
    ports:
      - "8017:8017"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8017/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Decision Guide Bot - Analyze government decision drafts
  decision-guide-bot:
    build:
      context: .
      dockerfile: ./DECISION_GUIDE_BOT/Dockerfile
    restart: unless-stopped
    ports:
      - "8020:8018"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8018/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Bot Chain Orchestrator (main entry point)
  bot-chain-api:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8002:80"
    volumes:
      - ./nginx-bot-chain.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - unified-intent-bot
      - sql-gen-bot
    networks:
      - bot-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - bot-chain-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - bot-chain-network
    profiles:
      - monitoring

volumes:
  bot_redis_data:
  bot_postgres_data:
  prometheus_data:
  grafana_data:

networks:
  bot-chain-network:
    name: ceci-bot-chain-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.27.0.0/16